import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np

from app.stocks import fetch_finviz
from app.save_data import save_stocks_to_csv
from app.news import fetch_google_news_rss, add_sentiment
from app.predictive_model import load_all_stocks_data, get_avg_sentiment_for_tickers
from app.web.auth import login, logout, register
from app.web.watchlist import get_watchlist, add_to_watchlist, remove_from_watchlist
from app.web.alerts import get_alerts, add_alert, remove_alert

# ----------------- INICJALIZACJA APLIKACJI -----------------
st.set_page_config(page_title="Stock AI Dashboard", layout="wide", page_icon="üìà")

# --- Inicjalizacja stanu sesji ---
if "user" not in st.session_state: st.session_state.user = None
if "is_guest" not in st.session_state: st.session_state.is_guest = False
if "model_run_success" not in st.session_state: st.session_state.model_run_success = False


# ----------------- FUNKCJE POMOCNICZE -----------------

def apply_custom_css():
    """Aplikuje subtelne, niestandardowe style CSS do aplikacji."""
    st.markdown("""
        <style>
            /* --- Style dla kart z Newsami --- */
            .news-card {
                background-color: #ffffff;
                border-radius: 10px;
                padding: 16px;
                margin-bottom: 12px;
                border: 1px solid #e6e6e6;
                box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            }
            .news-title a {
                text-decoration: none;
                color: #0d1b2a !important;
                font-weight: 600;
                font-size: 1.1em;
            }
            .news-title a:hover { text-decoration: underline; }
            .news-meta { font-size: 0.85em; color: #6c757d; margin-top: 8px; }
            .sentiment-badge { display: inline-block; padding: 3px 10px; border-radius: 15px; font-weight: 500; color: white; font-size: 0.8em; }
            .positive-bg { background-color: #28a745; }
            .negative-bg { background-color: #dc3545; }
            .neutral-bg { background-color: #6c757d; }
        </style>
    """, unsafe_allow_html=True)


def display_news_cards(df):
    """Wy≈õwietla newsy w formie estetycznych kart."""
    for _, row in df.iterrows():
        sentiment_score = row['sentiment']
        if sentiment_score > 0.05:
            sentiment_label, sentiment_class = "Pozytywny", "positive-bg"
        elif sentiment_score < -0.05:
            sentiment_label, sentiment_class = "Negatywny", "negative-bg"
        else:
            sentiment_label, sentiment_class = "Neutralny", "neutral-bg"
        st.markdown(f"""
            <div class="news-card">
                <p class="news-title"><a href="{row['link']}" target="_blank">{row['title']}</a></p>
                <p class="news-meta">Opublikowano: {row['published']} | Sentyment: <span class="sentiment-badge {sentiment_class}">{sentiment_label} ({sentiment_score:.2f})</span></p>
            </div>
        """, unsafe_allow_html=True)


def render_guest_lock_ui(title, icon, description):
    """Renderuje estetyczny placeholder dla funkcji dostƒôpnych po zalogowaniu, u≈ºywajƒÖc natywnych komponent√≥w Streamlit."""
    with st.container(border=True):
        st.markdown(f"### {icon} {title}")
        st.markdown(description)
        st.divider()
        if st.button("Zarejestruj siƒô lub zaloguj, aby odblokowaƒá", type="primary", use_container_width=True):
            logout()  # Czy≈õci stan sesji
            st.rerun()


# ----------------- SEKCJE APLIKACJI (RENDEROWANIE UI) -----------------

def render_login_page():
    """Renderuje stronƒô logowania, rejestracji i wej≈õcia jako go≈õƒá."""
    _, col_main, _ = st.columns([1, 2, 1])
    with col_main:
        st.markdown("<h1 style='text-align: center;'>Ur stock screer dashboard</h1>", unsafe_allow_html=True)
        st.markdown(
            "<p style='text-align: center;'>Zaloguj siƒô, zarejestruj lub wejd≈∫ jako go≈õƒá, by zerknƒÖƒá </p>",
            unsafe_allow_html=True)

        choice = st.radio("Wybierz opcjƒô:", ["Logowanie", "Rejestracja", "Tryb Go≈õcia"], horizontal=True,
                          label_visibility="collapsed")

        st.divider()

        if choice == "Logowanie":
            with st.form("login_form"):
                email = st.text_input("Email", placeholder="user@example.com")
                password = st.text_input("Has≈Ço", type="password", placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢")
                if st.form_submit_button("Zaloguj siƒô", use_container_width=True, type="primary"):
                    if login(email, password):
                        st.session_state.is_guest = False
                        st.rerun()
        elif choice == "Rejestracja":
            with st.form("register_form"):
                email = st.text_input("Email", placeholder="user@example.com")
                password = st.text_input("Has≈Ço", type="password", placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢")
                if st.form_submit_button("Zarejestruj siƒô", use_container_width=True):
                    register(email, password)
        elif choice == "Tryb Go≈õcia":
            st.info(
                "Tryb go≈õcia pozwala na przeglƒÖdanie og√≥lnodostƒôpnych danych i testowanie modelu predykcyjnego. Personalizacja (watchlista, alerty) wymaga rejestracji.",
                icon="‚ÑπÔ∏è")
            if st.button("Kontynuuj jako Go≈õƒá", use_container_width=True):
                st.session_state.user = {"email": "Go≈õƒá", "id": None}
                st.session_state.is_guest = True
                st.toast("‚úÖ Uruchomiono tryb go≈õcia.")
                st.rerun()


def render_dashboard():
    """Renderuje g≈Ç√≥wny dashboard aplikacji."""
    user, is_guest = st.session_state.user, st.session_state.is_guest

    col_title, col_user = st.columns([0.7, 0.3])
    with col_title:
        st.title("üìä AI Stock Screener")
    with col_user:
        if is_guest:
            if st.button("Zaloguj / Zarejestruj siƒô", use_container_width=True):
                logout()
                st.rerun()
        else:
            with st.container():
                st.markdown(f"<div style='text-align: right;'>Zalogowano jako:<br><b>{user['email']}</b></div>",
                            unsafe_allow_html=True)
                if st.button("Wyloguj", use_container_width=True, type="secondary"):
                    logout()
                    st.rerun()
    st.divider()
    st.subheader("üîß Konfiguracja po≈ÇƒÖczenia z bazƒÖ danych")

    if "db_configured" not in st.session_state:
        def safe_get(secret_name, fallback_value):
            try:
                val = st.secrets.get(secret_name)
                if val is None or val == "":
                    return fallback_value
                return val
            except Exception:
                return fallback_value

        default_mongo_uri = safe_get("default_mongo_uri", "‚ö†Ô∏è Brak warto≈õci (fallback)")
        default_mongo_db = safe_get("default_mongo_db", "‚ö†Ô∏è Brak warto≈õci (fallback)")

        default_pg_url = safe_get("default_pg_url", "‚ö†Ô∏è Brak warto≈õci (fallback)")
        default_pg_password = safe_get("default_pg_password", "‚ö†Ô∏è Brak warto≈õci (fallback)")
        default_pg_key = safe_get("default_pg_key", "‚ö†Ô∏è Brak warto≈õci (fallback)")

        default_sb_url = safe_get("default_sb_url", "‚ö†Ô∏è Brak warto≈õci (fallback)")
        default_sb_api = safe_get("default_sb_api", "‚ö†Ô∏è Brak warto≈õci (fallback)")
        default_sb_password = safe_get("default_sb_password", "‚ö†Ô∏è Brak warto≈õci (fallback)")

        db_choice = st.radio(
            "Wybierz spos√≥b po≈ÇƒÖczenia:",
            ["üîí U≈ºyj mojej w≈Çasnej konfiguracji", "‚öôÔ∏è U≈ºyj domy≈õlnej konfiguracji (z secrets.toml lub fallback)"],
            horizontal=True,
        )

        if db_choice == "üîí U≈ºyj mojej w≈Çasnej konfiguracji":
            with st.form("db_custom_form"):
                mongo_uri_input = st.text_input("MongoDB URI", placeholder="mongodb://user:pass@host:port/db")
                mongo_db_input = st.text_input("MongoDB DB name", placeholder="stocks_db")

                pg_url_input = st.text_input("PostgreSQL URL", placeholder="https://example.supabase.co")
                pg_password_input = st.text_input("PostgreSQL Password", type="password")
                pg_key_input = st.text_input("PostgreSQL Key (anon key)", type="password")

                sb_url_input = st.text_input("Supabase URL", placeholder="https://example.supabase.co")
                sb_api_input = st.text_input("Supabase API Key", type="password")
                sb_password_input = st.text_input("Supabase Password", type="password")

                if st.form_submit_button("üíæ Zapisz po≈ÇƒÖczenie", type="primary"):
                    st.session_state.update({
                        "mongo_uri": mongo_uri_input,
                        "mongo_db": mongo_db_input,
                        "pg_url": pg_url_input,
                        "pg_password": pg_password_input,
                        "pg_key": pg_key_input,
                        "sb_url": sb_url_input,
                        "sb_api": sb_api_input,
                        "sb_password": sb_password_input,
                        "db_mode": "custom",
                        "db_configured": True
                    })
                    st.success("‚úÖ Zapisano niestandardowƒÖ konfiguracjƒô bazy danych. Uruchom ponownie aplikacjƒô.")
                    st.rerun()
        else:
            st.session_state.update({
                "mongo_uri": st.secrets.get("mongo_uri", default_mongo_uri),
                "mongo_db": st.secrets.get("mongo_db", default_mongo_db),
                "pg_url": st.secrets.get("pg_url", default_pg_url),
                "pg_password": st.secrets.get("pg_password", default_pg_password),
                "pg_key": st.secrets.get("pg_key", default_pg_key),
                "sb_url": st.secrets.get("sb_url", default_sb_url),
                "sb_api": st.secrets.get("sb_api", default_sb_api),
                "sb_password": st.secrets.get("sb_password", default_sb_password),
                "db_mode": "default",
                "db_configured": True
            })
            st.success("‚úÖ U≈ºywana jest domy≈õlna konfiguracja po≈ÇƒÖczenia z bazƒÖ danych.")
    else:
        st.info("üîó Po≈ÇƒÖczenie z bazƒÖ danych jest ju≈º skonfigurowane.")

    #aktualne dane
    with st.expander("üîß Poka≈º dane konfiguracyjne"):
        st.text(f"pg_url: {st.session_state.get('pg_url', 'brak')}")
        st.text(f"pg_password: {st.session_state.get('pg_password', 'brak')}")
        st.text(f"pg_key: {st.session_state.get('pg_key', 'brak')}")
        st.text(f"sb_url: {st.session_state.get('sb_url', 'brak')}")
        st.text(f"sb_api: {st.session_state.get('sb_api', 'brak')}")
        st.text(f"sb_password: {st.session_state.get('sb_password', 'brak')}")

    tab1, tab2, tab3, tab4, tab5 = st.tabs(
        ["üìà Dane gie≈Çdowe", "üì∞ Newsy", "ü§ñ Model predykcyjny", "‚ù§Ô∏è Watchlista", "üîî Alerty Cenowe"])

    display_stocks_tab(tab1)
    display_news_tab(tab2, user.get('id'), is_guest)
    display_model_tab(tab3)
    display_watchlist_tab(tab4, user.get('id'), is_guest)
    display_alerts_tab(tab5, user.get('id'), is_guest)


def display_stocks_tab(tab_container):
    with tab_container:
        st.subheader("Pobierz dane gie≈Çdowe z Finviz")
        st.caption("U≈ºyj poni≈ºszych opcji, aby pobraƒá najnowsze dane o sp√≥≈Çkach i zapisaƒá je do analizy.")

        with st.expander("‚öôÔ∏è Ustawienia pobierania"):
            max_companies = st.number_input("Maksymalna ilo≈õƒá sp√≥≈Çek (0 = wszystkie)", min_value=0, value=20, step=10)
            with_filters = st.checkbox("Zastosuj filtry (Mid Cap, NASDAQ)", value=False)
            get_only_tickers = st.checkbox("Pobierz tylko tickery (szybciej)", value=False)

        if st.button("üîÑ Pobierz dane gie≈Çdowe", type="primary", use_container_width=True):
            with st.spinner("Pobieram dane z Finviz..."):
                df = fetch_finviz(max_companies, with_filters, get_only_tickers)
                if not df.empty:
                    st.success(f"Pobrano dane dla {len(df)} sp√≥≈Çek.")
                    st.dataframe(df, use_container_width=True, height=500)
                    save_stocks_to_csv(df, get_only_tickers, with_filters)
                else:
                    st.error("‚ùå Nie uda≈Ço siƒô pobraƒá danych. Spr√≥buj ponownie p√≥≈∫niej.")


def display_news_tab(tab_container, user_id, is_guest):
    with tab_container:
        st.subheader("Analiza sentymentu na podstawie news√≥w")
        st.caption("Wpisz ticker sp√≥≈Çki, aby pobraƒá najnowsze wiadomo≈õci i zobaczyƒá ich analizƒô sentymentu.")

        if is_guest:
            ticker = st.text_input("üîé Wpisz ticker (np. AAPL, TSLA)", key="news_ticker_guest").upper()
            st.info("Za≈Ç√≥≈º konto, aby m√≥c szybko wybieraƒá sp√≥≈Çki ze swojej spersonalizowanej watchlisty!", icon="‚≠ê")
        else:
            watchlist_tickers = [item['ticker'] for item in get_watchlist(user_id)]
            options = ["Wpisz rƒôcznie"]
            if watchlist_tickers: options.append("Wybierz z obserwowanych")

            analysis_choice = st.radio("Wybierz ≈∫r√≥d≈Ço tickera:", options, horizontal=True)
            if analysis_choice == "Wpisz rƒôcznie":
                ticker = st.text_input("üîé Wpisz ticker (np. AAPL, TSLA)", key="news_ticker_user").upper()
            else:
                ticker = st.selectbox("Wybierz sp√≥≈Çkƒô z Twojej watchlisty:", options=watchlist_tickers,
                                      key="news_ticker_select")

        if st.button("üì• Pobierz i analizuj newsy", type="primary", use_container_width=True):
            if ticker:
                with st.spinner(f"Pracujƒô nad analizƒÖ dla {ticker}..."):
                    df_news = fetch_google_news_rss(ticker)
                    if not df_news.empty:
                        df_news = add_sentiment(df_news)
                        st.divider()
                        st.markdown(f"**Wyniki dla: {ticker}**")
                        cols = st.columns(2)
                        cols[0].metric("≈öredni sentyment", f"{df_news['sentiment'].mean():.3f}")
                        cols[1].metric("Liczba przeanalizowanych news√≥w", len(df_news))
                        fig = px.histogram(df_news, x="sentiment", nbins=20, title=f"Rozk≈Çad sentymentu dla {ticker}")
                        st.plotly_chart(fig, use_container_width=True)
                        display_news_cards(df_news)
                    else:
                        st.warning(f"Nie znaleziono nowszych wiadomo≈õci dla tickera {ticker}.")
            else:
                st.warning("Proszƒô wpisaƒá lub wybraƒá ticker do analizy.")


def display_model_tab(tab_container):
    with tab_container:
        st.subheader("Model predykcyjny AI")
        st.info(
            "Model ocenia sp√≥≈Çki na podstawie ceny, kapitalizacji rynkowej i u≈õrednionego sentymentu z news√≥w, tworzƒÖc 'Potential Score'. Im wy≈ºszy wynik, tym wiƒôkszy potencja≈Ç wed≈Çug modelu.",
            icon="üí°")

        top_n = st.slider("üìä Wybierz, ile najlepszych sp√≥≈Çek wy≈õwietliƒá", 5, 50, 20, 5)

        if st.button("üöÄ Uruchom model", type="primary", use_container_width=True):
            with st.spinner("Analizujƒô dane i uruchamiam model... To mo≈ºe potrwaƒá chwilƒô."):
                df_all = load_all_stocks_data()
                if not df_all.empty:
                    # Logika modelu pozostaje bez zmian
                    tickers = df_all['ticker'].dropna().unique()
                    dates = df_all['import_date'].dropna().unique()
                    all_sentiments = [get_avg_sentiment_for_tickers(tickers, day) for day in dates]
                    sentiment_all = pd.concat(all_sentiments, ignore_index=True)
                    df_all = df_all.merge(sentiment_all, on=['ticker', 'import_date'], how='left').fillna(
                        {'avg_sentiment': 0.0})
                    df_all['market_cap_log'] = np.log1p(df_all['market_cap'].astype(float))
                    p_norm = (df_all['price'] - df_all['price'].min()) / (
                                df_all['price'].max() - df_all['price'].min() + 1e-9)
                    mc_norm = (df_all['market_cap_log'] - df_all['market_cap_log'].min()) / (
                                df_all['market_cap_log'].max() - df_all['market_cap_log'].min() + 1e-9)
                    min_sent, max_sent = df_all['avg_sentiment'].min(), df_all['avg_sentiment'].max()
                    sentiment_range = max_sent - min_sent if (max_sent - min_sent) != 0 else 1
                    sentiment_norm = (df_all['avg_sentiment'] - min_sent) / sentiment_range
                    df_all['potential_score'] = (0.4 * p_norm + 0.4 * mc_norm + 0.2 * sentiment_norm).fillna(0)
                    last_day = max(df_all['import_date'])
                    df_day = df_all[df_all['import_date'] == last_day].copy()

                    def explain_decision(row, df):
                        reasons = []
                        if row['price'] > df['price'].quantile(0.75): reasons.append("wysoka cena")
                        if row['market_cap_log'] > df['market_cap_log'].quantile(0.75): reasons.append(
                            "du≈ºa kapitalizacja")
                        if row['avg_sentiment'] > 0.1: reasons.append("pozytywny sentyment")
                        if row['potential_score'] > df['potential_score'].quantile(0.75): reasons.append(
                            "wysoki potencja≈Ç")
                        return ", ".join(reasons) if reasons else "stabilne wska≈∫niki"

                    df_day['reason'] = df_day.apply(lambda r: explain_decision(r, df_day), axis=1)
                    top_day = df_day.sort_values('potential_score', ascending=False).head(top_n)
                    st.session_state.update({'model_run_success': True, 'top_day': top_day, 'last_day': last_day})
                else:
                    st.error("Brak danych historycznych do analizy. Pobierz dane w pierwszej zak≈Çadce.")

        if st.session_state.get('model_run_success'):
            st.divider()
            st.success(
                f"Oto Top {len(st.session_state.top_day)} sp√≥≈Çek z dnia {st.session_state.last_day} wed≈Çug modelu:")
            st.dataframe(
                st.session_state.top_day[['ticker', 'company', 'potential_score', 'avg_sentiment', 'price', 'reason']],
                use_container_width=True)


def display_watchlist_tab(tab_container, user_id, is_guest):
    with tab_container:
        if is_guest:
            render_guest_lock_ui(
                title="Twoja osobista Watchlista", icon="‚ù§Ô∏è",
                description="Zapisuj interesujƒÖce Ciƒô sp√≥≈Çki, aby mieƒá je zawsze pod rƒôkƒÖ. ≈öled≈∫ ich wyniki i analizuj newsy jednym klikniƒôciem. Ta funkcja jest dostƒôpna po za≈Ço≈ºeniu darmowego konta."
            )
            return

        st.subheader("‚ù§Ô∏è Twoja Watchlista")
        with st.form("add_ticker_form", clear_on_submit=True):
            new_ticker = st.text_input("Dodaj ticker do obserwowanych:", placeholder="np. NVDA").upper()
            if st.form_submit_button("‚ûï Dodaj do watchlisty", use_container_width=True, type="primary"):
                if new_ticker:
                    add_to_watchlist(user_id, new_ticker)
                    st.rerun()

        st.divider()
        st.markdown("#### Obecnie obserwujesz:")
        watchlist_data = get_watchlist(user_id)
        if not watchlist_data:
            st.info("Twoja watchlista jest pusta. Dodaj ticker powy≈ºej, aby zaczƒÖƒá obserwowaƒá.")
        else:
            for item in watchlist_data:
                col1, col2 = st.columns([4, 1])
                col1.code(item['ticker'])
                if col2.button("üóëÔ∏è Usu≈Ñ", key=f"del_watch_{item['id']}", use_container_width=True):
                    remove_from_watchlist(item['id'])
                    st.rerun()


def display_alerts_tab(tab_container, user_id, is_guest):
    with tab_container:
        if is_guest:
            render_guest_lock_ui(
                title="Automatyczne Alerty Cenowe", icon="üîî",
                description="Nie przegap ≈ºadnej okazji! Ustaw progi cenowe dla wybranych sp√≥≈Çek, a system powiadomi Ciƒô, gdy cena osiƒÖgnie docelowy poziom. Ta funkcja jest dostƒôpna po za≈Ço≈ºeniu darmowego konta."
            )
            return

        st.subheader("üîî Ustaw nowe Alerty Cenowe")

        with st.form("add_alert_form", clear_on_submit=True):
            alert_ticker = st.text_input("Ticker", placeholder="np. AAPL").upper()
            col_low, col_high = st.columns(2)

            # pozw√≥l u≈ºytkownikowi wpisaƒá tylko jedno z prog√≥w
            threshold_low_input = col_low.text_input("Powiadom, gdy cena spadnie poni≈ºej:", placeholder="np. 150.00")
            threshold_high_input = col_high.text_input("Powiadom, gdy cena wzro≈õnie powy≈ºej:", placeholder="np. 200.00")

            # konwersja na liczby lub None
            threshold_low = float(threshold_low_input) if threshold_low_input.strip() else None
            threshold_high = float(threshold_high_input) if threshold_high_input.strip() else None

            if st.form_submit_button("üîî Ustaw alert", use_container_width=True, type="primary"):
                if not alert_ticker:
                    st.warning("Podaj ticker.")
                elif threshold_low is None and threshold_high is None:
                    st.warning("Podaj co najmniej jeden pr√≥g cenowy.")
                else:
                    add_alert(user_id, alert_ticker, threshold_high or 0, threshold_low or 0)
                    st.rerun()

        st.divider()
        st.markdown("#### Twoje aktywne alerty:")

        active_alerts = get_alerts(user_id)
        if not active_alerts:
            st.info("Nie masz ustawionych ≈ºadnych alert√≥w.")
        else:
            for alert in active_alerts:
                with st.container(border=True):
                    col1, col2 = st.columns([3, 1])
                    with col1:
                        low_price = f"${alert['threshold_low']:.2f}" if alert.get('threshold_low') else "Brak"
                        high_price = f"${alert['threshold_high']:.2f}" if alert.get('threshold_high') else "Brak"
                        st.markdown(f"**{alert['ticker']}**")
                        st.markdown(
                            f"<span style='color: #dc3545;'>Poni≈ºej: {low_price}</span> | "
                            f"<span style='color: #28a745;'>Powy≈ºej: {high_price}</span>",
                            unsafe_allow_html=True
                        )
                    if col2.button("üóëÔ∏è Usu≈Ñ alert", key=f"del_alert_{alert['id']}", use_container_width=True):
                        remove_alert(alert['id'])
                        st.rerun()



# ----------------- G≈Å√ìWNY PUNKT WEJ≈öCIA APLIKACJI -----------------

def main():
    """G≈Ç√≥wna funkcja uruchamiajƒÖca aplikacjƒô."""
    apply_custom_css()
    if not st.session_state.user:
        render_login_page()
    else:
        render_dashboard()


if __name__ == "__main__":
    main()