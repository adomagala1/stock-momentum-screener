import sys
import os
import json
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from streamlit_lottie import st_lottie

# --- Konfiguracja ≈öcie≈ºek ---
sys.path.append(os.path.abspath(os.path.dirname(__file__)))

# --- Importy z modu≈Ç√≥w ---
from app.stocks import fetch_finviz
from app.save_data import save_stocks_to_csv
from app.news import fetch_google_news_rss, add_sentiment
from app.predictive_model import load_all_stocks_data, get_avg_sentiment_for_tickers
from app.web.auth import login, logout, register
from app.web.watchlist import get_watchlist, add_to_watchlist, remove_from_watchlist
from app.web.alerts import get_alerts, add_alert, remove_alert

# ----------------- INICJALIZACJA APLIKACJI -----------------
st.set_page_config(page_title="Stock AI Dashboard", layout="wide", page_icon="üìà")


# --- Funkcja do ≈Çadowania animacji (je≈õli istnieje) ---
def load_lottiefile(filepath: str):
    try:
        with open(filepath, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return None


# --- CSS DLA NOWEGO NAG≈Å√ìWKA I KART NEWS√ìW ---
st.markdown("""
    <style>
    /* Ukrycie domy≈õlnego menu Streamlit */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}

    /* Kontener dla informacji o u≈ºytkowniku w nag≈Ç√≥wku */
    .user-panel {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        padding: 5px 0;
        gap: 12px;
    }
    .user-email {
        font-weight: 500;
        color: #333;
    }
    .user-icon svg {
        width: 28px;
        height: 28px;
        fill: #333;
    }
    /* Style dla kart news√≥w */
    .news-card {
        background-color: #f8f9fa; border-left: 4px solid #007bff; border-radius: 5px;
        padding: 1rem; margin-bottom: 1rem;
    }
    .news-title a { font-size: 1.1rem; font-weight: 600; text-decoration: none; color: inherit; }
    .news-meta { font-size: 0.85rem; color: #6c757d; }
    .sentiment-badge { font-weight: 700; padding: 3px 10px; border-radius: 12px; font-size: 13px; color: #fff; }
    .positive-bg { background-color: #28a745; }
    .negative-bg { background-color: #dc3545; }
    .neutral-bg { background-color: #6c757d; }
    </style>
""", unsafe_allow_html=True)


def display_news_cards(df):
    if df.empty:
        st.info("Brak news√≥w do wy≈õwietlenia.")
        return
    for _, row in df.iterrows():
        sentiment, headline, source, published, link = row['sentiment'], row['headline'], row['source'], row[
            'published'], row.get('link', '#')
        if sentiment > 0.1:
            sentiment_class, sentiment_label = "positive-bg", f"Pozytywny ({sentiment:.2f})"
        elif sentiment < -0.1:
            sentiment_class, sentiment_label = "negative-bg", f"Negatywny ({sentiment:.2f})"
        else:
            sentiment_class, sentiment_label = "neutral-bg", f"Neutralny ({sentiment:.2f})"
        card_html = f"""
        <div class="news-card">
            <p class="news-title"><a href="{link}" target="_blank">{headline}</a></p>
            <p class="news-meta">≈πr√≥d≈Ço: {source} | Opublikowano: {published}</p>
            <div>Sentyment: <span class="sentiment-badge {sentiment_class}">{sentiment_label}</span></div>
        </div>
        """
        st.markdown(card_html, unsafe_allow_html=True)


# ----------------- SEKCJA LOGOWANIA / REJESTRACJI -----------------
if "user" not in st.session_state or not st.session_state["user"]:
    lottie_animation = load_lottiefile("assets/animation.json")
    _, col_main, _ = st.columns([1, 2, 1])
    with col_main:
        if lottie_animation:
            st_lottie(lottie_animation, speed=1, height=200, key="initial")
        st.title("Witaj w Stock AI Dashboard")
        st.markdown("<p style='text-align: center;'>Zaloguj siƒô lub utw√≥rz konto, aby rozpoczƒÖƒá analizƒô.</p>",
                    unsafe_allow_html=True)
        with st.container(border=True):
            choice = st.radio("Opcja:", ["Logowanie", "Rejestracja"], horizontal=True, label_visibility="collapsed")
            email = st.text_input("Email", placeholder="user@example.com")
            password = st.text_input("Has≈Ço", type="password", placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢")
            if choice == "Logowanie" and st.button("Zaloguj siƒô", use_container_width=True, type="primary"):
                if login(email, password): st.rerun()
            elif choice == "Rejestracja" and st.button("Zarejestruj siƒô", use_container_width=True):
                register(email, password)
    st.stop()

# ----------------- G≈Å√ìWNA CZƒò≈öƒÜ APLIKACJI (PO ZALOGOWANIU) -----------------
else:
    user = st.session_state["user"]

    # --- NOWY NAG≈Å√ìWEK BEZ SIDEBARA ---
    col_title, col_user_panel = st.columns([0.7, 0.3])
    with col_title:
        st.title("üìä AI Stock Screener")
    with col_user_panel:
        with st.container():
            col_icon, col_email, col_button = st.columns([1, 3, 2])
            with col_icon:
                st.markdown("""
                    <div class="user-icon" style="text-align: right; padding-top: 5px;">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="28" height="28">
                            <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                        </svg>
                    </div>
                """, unsafe_allow_html=True)
            with col_email:
                st.markdown(f"<div style='padding-top: 8px;'>{user.email}</div>", unsafe_allow_html=True)
            with col_button:
                if st.button("Wyloguj"):
                    logout()
                    st.rerun()
    st.markdown("---")

    # --- ZAK≈ÅADKI APLIKACJI ---
    tab1, tab2, tab3, tab4, tab5 = st.tabs(
        ["üìà Dane gie≈Çdowe", "üì∞ Newsy", "ü§ñ Model predykcyjny", "‚ù§Ô∏è Watchlista", "üîî Alerty Cenowe"])

    user_id = user.id

    # ==================== TAB 1: DANE GIE≈ÅDOWE ====================
    with tab1:
        st.subheader("Pobierz dane gie≈Çdowe z Finviz")
        with st.container(border=True):
            col1, col2, col3 = st.columns(3)
            max_companies = col1.number_input("Ilo≈õƒá sp√≥≈Çek (0 = wszystkie)", min_value=0, value=20, step=10,
                                              key="max_companies_tab1")
            with_filters = col2.checkbox("Filtry (Mid Cap, NASDAQ)", value=False, key="filters_tab1")
            get_only_tickers = col3.checkbox("Tylko tickery?", value=False, key="tickers_only_tab1")
        if st.button("üîÑ Pobierz dane gie≈Çdowe", type="primary"):
            with st.spinner("Pobieram dane z Finviz..."):
                df = fetch_finviz(max_companies, with_filters, get_only_tickers)
                if not df.empty:
                    st.success(f"Pobrano {len(df)} sp√≥≈Çek")
                    st.dataframe(df, use_container_width=True, height=500)
                    save_stocks_to_csv(df, get_only_tickers, with_filters)
                else:
                    st.error("‚ùå Nie uda≈Ço siƒô pobraƒá danych.")

    # ==================== TAB 2: NEWSY ====================
    with tab2:
        st.subheader("Newsy i analiza sentymentu")
        watchlist_tickers = [item['ticker'] for item in get_watchlist(user_id)]
        analysis_choice = st.radio("Wybierz ≈∫r√≥d≈Ço tickera:", ["Wpisz rƒôcznie", "Wybierz z obserwowanych"],
                                   horizontal=True, key="news_choice")

        if analysis_choice == "Wpisz rƒôcznie":
            ticker = st.text_input("üîé Wpisz ticker (np. AAPL, TSLA)", key="ticker_news_tab2").upper()
        else:
            if not watchlist_tickers:
                st.warning("Twoja watchlista jest pusta. Dodaj sp√≥≈Çki w zak≈Çadce '‚ù§Ô∏è Watchlista'.")
                ticker = ""
            else:
                ticker = st.selectbox("Wybierz sp√≥≈Çkƒô z Twojej watchlisty:", options=watchlist_tickers)

        if st.button("üì• Pobierz newsy dla sp√≥≈Çki", type="primary"):
            if ticker:
                with st.spinner(f"Pobieram i analizujƒô newsy dla {ticker}..."):
                    df_news = fetch_google_news_rss(ticker)
                    if not df_news.empty:
                        df_news = add_sentiment(df_news)
                        avg_sent = df_news['sentiment'].mean()
                        c1, c2 = st.columns(2)
                        c1.metric("≈öredni sentyment", f"{avg_sent:.3f}")
                        c2.metric("Liczba news√≥w", len(df_news))
                        fig = px.histogram(df_news, x="sentiment", nbins=20, title=f"Rozk≈Çad sentymentu dla {ticker}")
                        st.plotly_chart(fig, use_container_width=True)
                        display_news_cards(df_news)
                    else:
                        st.warning(f"Brak news√≥w dla {ticker}")
            else:
                st.warning("Proszƒô wpisaƒá lub wybraƒá ticker.")

    # ==================== TAB 3: MODEL PREYDYKCYJNY ====================
    with tab3:
        st.subheader("Predykcja na podstawie modelu i sentymentu")
        top_n = st.slider("üìä Liczba najlepszych sp√≥≈Çek do wy≈õwietlenia", min_value=5, max_value=50, value=20, step=5)

        if st.button("üöÄ Uruchom model predykcyjny", type="primary"):
            with st.spinner("‚è≥ Analizujƒô dane historyczne i sentyment... Mo≈ºe to potrwaƒá chwilƒô."):
                df_all = load_all_stocks_data()
                if not df_all.empty:
                    # Tutaj ca≈Ça logika modelu
                    tickers = df_all['ticker'].dropna().unique()
                    dates = df_all['import_date'].dropna().unique()
                    all_sentiments = []
                    for day in dates:
                        sentiment_df = get_avg_sentiment_for_tickers(tickers, day)
                        sentiment_df['import_date'] = day
                        all_sentiments.append(sentiment_df)
                    sentiment_all = pd.concat(all_sentiments, ignore_index=True)
                    df_all = df_all.merge(sentiment_all, on=['ticker', 'import_date'], how='left').fillna(
                        {'avg_sentiment': 0.0})
                    df_all['market_cap_log'] = np.log1p(df_all['market_cap'].astype(float))
                    p_norm = (df_all['price'] - df_all['price'].min()) / (
                                df_all['price'].max() - df_all['price'].min() + 1e-9)
                    mc_norm = (df_all['market_cap_log'] - df_all['market_cap_log'].min()) / (
                                df_all['market_cap_log'].max() - df_all['market_cap_log'].min() + 1e-9)
                    min_sent, max_sent = df_all['avg_sentiment'].min(), df_all['avg_sentiment'].max()
                    sentiment_range = max_sent - min_sent if (max_sent - min_sent) != 0 else 1
                    sentiment_norm = (df_all['avg_sentiment'] - min_sent) / sentiment_range
                    df_all['potential_score'] = (0.4 * p_norm + 0.4 * mc_norm + 0.2 * sentiment_norm).fillna(0)
                    last_day = max(df_all['import_date'])
                    df_day = df_all[df_all['import_date'] == last_day].copy()


                    def explain_decision(row, df):
                        reasons = []
                        if row['price'] > df['price'].quantile(0.75): reasons.append("wysoka cena")
                        if row['market_cap_log'] > df['market_cap_log'].quantile(0.75): reasons.append(
                            "du≈ºa kapitalizacja")
                        if row['avg_sentiment'] > 0.1: reasons.append("bardzo pozytywny sentyment")
                        if row['potential_score'] > df['potential_score'].quantile(0.75): reasons.append(
                            "wysoki potencja≈Ç modelu")
                        return ", ".join(reasons) if reasons else "stabilne wska≈∫niki"


                    df_day['reason'] = df_day.apply(lambda r: explain_decision(r, df_day), axis=1)
                    top_day = df_day.sort_values('potential_score', ascending=False).head(top_n)
                    st.session_state.update(
                        {'model_run_success': True, 'df_all': df_all, 'top_day': top_day, 'last_day': last_day})
                else:
                    st.error("Brak danych historycznych. Uruchom skrypt zbierajƒÖcy dane.")

        if st.session_state.get('model_run_success', False):
            top_day = st.session_state['top_day']
            df_all = st.session_state['df_all']
            st.success(f"‚úÖ Analiza zako≈Ñczona. Oto Top {len(top_day)} sp√≥≈Çek z dnia {st.session_state['last_day']}")
            st.dataframe(top_day[['ticker', 'company', 'potential_score', 'avg_sentiment', 'price', 'reason']],
                         use_container_width=True)

            st.markdown("---")
            st.subheader("Szczeg√≥≈Çowa analiza wybranej sp√≥≈Çki")
            chosen_ticker = st.selectbox("Wybierz sp√≥≈Çkƒô z powy≈ºszej listy:", options=top_day['ticker'].unique())
            if chosen_ticker:
                stock_data = top_day[top_day['ticker'] == chosen_ticker].iloc[0]
                st.info(f"**Uzasadnienie wyboru:** {stock_data['reason']}")
                # Tutaj mo≈ºesz dodaƒá wykresy i dalsze analizy dla wybranego tickera

    # ==================== TAB 4: WATCHLISTA ====================
    with tab4:
        st.subheader("‚ù§Ô∏è Twoja Watchlista")
        with st.form("add_ticker_form", clear_on_submit=True):
            new_ticker = st.text_input("Dodaj ticker do obserwowanych:", placeholder="np. NVDA").upper()
            if st.form_submit_button("‚ûï Dodaj", use_container_width=True, type="primary"):
                if new_ticker:
                    add_to_watchlist(user_id, new_ticker)
                    st.rerun()
        st.markdown("---")
        st.markdown("#### Obecnie obserwujesz:")
        watchlist_data = get_watchlist(user_id)
        if not watchlist_data:
            st.info("Twoja watchlista jest pusta.")
        else:
            for item in watchlist_data:
                col1, col2 = st.columns([4, 1])
                col1.code(item['ticker'])
                if col2.button("üóëÔ∏è Usu≈Ñ", key=f"del_watch_{item['id']}", use_container_width=True):
                    remove_from_watchlist(item['id'])
                    st.toast(f"Usuniƒôto {item['ticker']} z obserwowanych.")
                    st.rerun()

    # ==================== TAB 5: ALERTY CENOWE ====================
    with tab5:
        st.subheader("üîî Alerty Cenowe")
        with st.form("add_alert_form", clear_on_submit=True):
            alert_ticker = st.text_input("Ticker", placeholder="np. AAPL").upper()
            col_low, col_high = st.columns(2)
            threshold_low = col_low.number_input("Powiadom, gdy cena spadnie poni≈ºej:", min_value=0.0, format="%.2f")
            threshold_high = col_high.number_input("Powiadom, gdy cena wzro≈õnie powy≈ºej:", min_value=0.0, format="%.2f")
            if st.form_submit_button("üîî Ustaw alert", use_container_width=True, type="primary"):
                if alert_ticker and (threshold_low > 0 or threshold_high > 0):
                    add_alert(user_id, alert_ticker, threshold_high, threshold_low)
                    st.rerun()
                else:
                    st.warning("Wpisz ticker i co najmniej jeden pr√≥g cenowy.")
        st.markdown("---")
        st.markdown("#### Twoje aktywne alerty:")
        active_alerts = get_alerts(user_id)
        if not active_alerts:
            st.info("Nie masz ustawionych ≈ºadnych alert√≥w.")
        else:
            for alert in active_alerts:
                with st.container(border=True):
                    col1, col2 = st.columns([3, 1])
                    with col1:
                        low_price = f"${alert['threshold_low']}" if alert['threshold_low'] else "Brak"
                        high_price = f"${alert['threshold_high']}" if alert['threshold_high'] else "Brak"
                        st.markdown(f"**{alert['ticker']}**")
                        st.markdown(
                            f"<span style='color: #dc3545;'>‚Üì {low_price}</span> | <span style='color: #28a745;'>‚Üë {high_price}</span>",
                            unsafe_allow_html=True)
                    if col2.button("üóëÔ∏è Usu≈Ñ alert", key=f"del_alert_{alert['id']}", use_container_width=True):
                        remove_alert(alert['id'])
                        st.toast(f"Usuniƒôto alert dla {alert['ticker']}.")
                        st.rerun()