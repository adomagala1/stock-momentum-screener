import streamlit as st
from supabase import create_client
from sqlalchemy import create_engine, text
from pymongo import MongoClient


# --------------------- SUPABASE ---------------------
def setup_supabase_tables_as_postgres():
    """
    Inicjalizuje tabele w Supabase, ≈ÇƒÖczƒÖc siƒô bezpo≈õrednio z bazƒÖ danych PostgreSQL.
    Zwraca True w przypadku sukcesu, False w przypadku b≈Çƒôdu.
    """
    try:
        # Ten URL musisz wziƒÖƒá z panelu Supabase (Project Settings -> Database)
        # Powinien byƒá przechowywany w st.session_state lub st.secrets
        # np. st.session_state["db_connection_string"]
        db_url = st.session_state.get("db_connection_string")

        if not db_url:
            st.warning("‚ö†Ô∏è Supabase/PostgreSQL: Brak connection stringa do bazy danych.")
            return False

        # Tworzymy silnik do po≈ÇƒÖczenia z bazƒÖ danych
        engine = create_engine(db_url)

        # ≈ÅƒÖczymy siƒô i wykonujemy polecenia SQL
        with engine.connect() as conn:
            st.info("Supabase Sprawdzanie i tworzenie tabel...")
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS public.stocks_data (
                id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                ticker TEXT NOT NULL,
                import_date TIMESTAMPTZ DEFAULT NOW(),
                close FLOAT,
                volume BIGINT,
                sentiment FLOAT
            );
            """))

            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS public.user_models (
                id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                user_id UUID,
                model_results JSONB,
                created_at TIMESTAMPTZ DEFAULT NOW()
            );
            """))

            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS public.watchlist (
                id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                user_id UUID,
                ticker TEXT NOT NULL,
                UNIQUE(user_id, ticker)
            );
            """))

            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS public.alerts (
                id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                user_id UUID,
                ticker TEXT NOT NULL,
                target_price FLOAT NOT NULL,
                trigger TEXT
            );
            """))

            # Zatwierdzamy zmiany
            conn.commit()

        st.success("‚úÖ Supabase/PostgreSQL: Tabele zosta≈Çy poprawnie skonfigurowane.")
        return True
    except Exception as e:
        st.warning(f"‚ö†Ô∏è B≈ÇƒÖd przy inicjalizacji Supabase/PostgreSQL: {e}")
        return False


# --------------------- POSTGRESQL ---------------------
# def setup_postgres_tables():
#     try:
#         pg_url = st.session_state.get("pg_url")
#         engine = create_engine(pg_url)
#
#         with engine.connect() as conn:
#             conn.execute(text("""
#             CREATE TABLE IF NOT EXISTS stocks_data (
#                 ticker TEXT,
#                 import_date TIMESTAMP,
#                 close FLOAT,
#                 volume FLOAT,
#                 sentiment FLOAT
#             );
#             """))
#             conn.execute(text("""
#             CREATE TABLE IF NOT EXISTS user_models (
#                 user_id TEXT,
#                 model_results JSONB,
#                 created_at TIMESTAMP DEFAULT NOW()
#             );
#             """))
#             conn.execute(text("""
#             CREATE TABLE IF NOT EXISTS watchlist (
#                 user_id TEXT,
#                 ticker TEXT
#             );
#             """))
#             conn.execute(text("""
#             CREATE TABLE IF NOT EXISTS alerts (
#                 user_id TEXT,
#                 ticker TEXT,
#                 target_price FLOAT,
#                 trigger TEXT
#             );
#             """))
#             conn.commit()
#
#         st.success("‚úÖ PostgreSQL: tabele zosta≈Çy utworzone automatycznie.")
#     except Exception as e:
#         st.warning(f"‚ö†Ô∏è B≈ÇƒÖd przy inicjalizacji PostgreSQL: {e}")


# --------------------- MONGODB ---------------------
# def setup_mongodb_collections():
#     try:
#         mongo_uri = st.session_state.get("mongo_uri")
#         mongo_db_name = st.session_state.get("mongo_db")
#         client = MongoClient(mongo_uri)
#         db = client[mongo_db_name]
#
#         collections = ["news_data", "sentiment_analysis"]
#         for c in collections:
#             if c not in db.list_collection_names():
#                 db.create_collection(c)
#
#         st.success("‚úÖ MongoDB: kolekcje utworzone automatycznie.")
#     except Exception as e:
#         st.warning(f"‚ö†Ô∏è B≈ÇƒÖd przy inicjalizacji MongoDB: {e}")


# --------------------- CA≈ÅO≈öƒÜ ---------------------
def auto_initialize_all():
    try:
        st.info("üîÑ Trwa automatyczna konfiguracja baz danych...")
        setup_supabase_tables_as_postgres()
        # setup_postgres_tables()
        # setup_mongodb_collections()
        st.success("üéØ Wszystkie bazy zosta≈Çy poprawnie skonfigurowane.")
    except Exception as e:
        st.warning(f"‚ö†Ô∏è B≈ÇƒÖd przy inicjalizacji baz danych: {e}")
