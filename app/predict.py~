import pandas as pd
import numpy as np
import logging
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, r2_score
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR

def convert_market_cap(value):
    """Funkcja do przekształcenia wartości rynkowej z tekstu na liczbę"""
    if isinstance(value, str):
        value = value.upper()
        if 'B' in value:
            return float(value.replace('B', '').replace(',', '').strip()) * 1e9  # Przemień na miliardy
        elif 'M' in value:
            return float(value.replace('M', '').replace(',', '').strip()) * 1e6  # Przemień na miliony
        elif 'K' in value:
            return float(value.replace('K', '').replace(',', '').strip()) * 1e3  # Przemień na tysiące
        else:
            return float(value.replace(',', '').strip())  # Obsługuje inne przypadki (np. liczby bez jednostek)
    return value


def prepare_data(df: pd.DataFrame):
    # Przekształcamy kolumny na odpowiednie typy
    df['Market Cap'] = df['Market Cap'].apply(convert_market_cap)
    df['P/E'] = pd.to_numeric(df['P/E'], errors='coerce')

    # Usuwamy znak procenta i konwertujemy na liczby zmiennoprzecinkowe (na wszelki wypadek, użyjemy float)
    df['Perf Week'] = df['Perf Week'].replace('%', '', regex=True).astype(float, errors='ignore')
    df['Perf Month'] = df['Perf Month'].replace('%', '', regex=True).astype(float, errors='ignore')

    # Sprawdzamy, czy istnieją nadal jakieś wartości tekstowe w kolumnach
    # Jeśli występują, zamieniamy je na NaN
    df['Perf Week'] = pd.to_numeric(df['Perf Week'], errors='coerce')
    df['Perf Month'] = pd.to_numeric(df['Perf Month'], errors='coerce')

    # Usuwamy wiersze z brakującymi wartościami
    df = df.dropna(subset=['Price', 'Market Cap', 'P/E', 'EPS next 5Y', 'Volume'])

    # Wybieramy cechy (features) i zmienną docelową (target)
    X = df[['Market Cap', 'P/E', 'EPS next 5Y', 'Volume', 'Perf Week', 'Perf Month']]
    y = df['Price']

    # Normalizujemy cechy
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    return X_scaled, y


def train_predict_model(df: pd.DataFrame):
    """Trening modelu predykcyjnego"""
    df['Market Cap'] = df['Market Cap'].apply(convert_market_cap)

    X, y = prepare_data(df)

    # Podział na zbiór treningowy i testowy
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Model regresji liniowej
    model = LinearRegression()

    # Trenowanie modelu
    model.fit(X_train, y_train)

    # Predykcja
    y_pred = model.predict(X_test)

    # Ocena modelu
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    logging.info(f"MAE (średni błąd absolutny): {mae}")
    logging.info(f"R2 (współczynnik determinacji): {r2}")

    return model, y_test, y_pred


def plot_predictions(y_test, y_pred):
    """Wizualizacja predykcji"""
    import matplotlib.pyplot as plt

    plt.scatter(y_test, y_pred)
    plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red')  # Linia regresji
    plt.xlabel('Rzeczywiste ceny')
    plt.ylabel('Przewidywane ceny')
    plt.title('Predykcja ceny akcji')
    plt.show()


if __name__ == "__main__":
    # Załaduj dane z CSV
    df = pd.read_csv('data/finviz_stocks_20250915.csv')

    # Trening i predykcja
    model, y_test, y_pred = train_predict_model(df)

    # Wizualizacja wyników
    plot_predictions(y_test, y_pred)
