import glob
import logging
import os

logging.basicConfig(
    level=logging.INFO,
    filename="logs/helpers.log",
    format="%(asctime)s [%(levelname)s] %(message)s"
)

def get_exact_file(end_width: str,
                   get_only_tickers: bool,
                   with_filters: bool,
                   file_type: str = "stocks") -> str:
    """
    Zwraca pełną ścieżkę do pliku CSV.
    file_type: 'stocks' lub 'news'
    end_width: data w formacie YYYYMMDD
    """
    if file_type not in ("stocks", "news"):
        raise ValueError("file_type musi być 'stocks' lub 'news'")

    base_dir = os.path.abspath(os.path.join(os.path.dirname(__file__),  "data"))

    if file_type == "stocks":
        folder = os.path.join(base_dir, "stocks", end_width)
    else:  # news
        folder = os.path.join(base_dir, "news")

    filename_suffix = {
        (True, False): f"finviz_tickers_{end_width}.csv",
        (False, False): f"finviz_stocks_{end_width}.csv",
        (False, True): f"finviz_filtered_stocks_{end_width}.csv",
        (True, True): f"finviz_filtered_tickers_{end_width}.csv"
    }

    file_pattern = os.path.join(folder, filename_suffix.get((get_only_tickers, with_filters)))
    logging.info(f"Szukam pliku: {file_pattern}")

    files = glob.glob(file_pattern)
    if not files:
        raise FileNotFoundError(f"Brak pliku '{filename_suffix.get((get_only_tickers, with_filters))}' w folderze {folder}")

    return files[0]



def human_readable_market_cap(value):
    """Konwertuje market cap na czytelny format: K, M, B, T"""
    try:
        value = float(value)
    except:
        return value

    if value >= 1_000_000_000_000:
        return f"{value/1_000_000_000_000:.2f}T"
    elif value >= 1_000_000_000:
        return f"{value/1_000_000_000:.2f}B"
    elif value >= 1_000_000:
        return f"{value/1_000_000:.2f}M"
    elif value >= 1_000:
        return f"{value/1_000:.2f}K"
    else:
        return str(value)